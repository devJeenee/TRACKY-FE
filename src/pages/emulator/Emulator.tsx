import { useEffect, useState, useRef } from "react";
import mockGpsData from "@/libs/utils/mockGpsData";
import gpsBuffer from "@/libs/utils/gpsBuffer";
import { hubApiService } from "@/libs/apis/hubApi";
import {
  calculateDistance,
  createEngineOnRequest,
  createEngineOffRequest,
  initLocation
} from "@/libs/utils/emulatorUtils";

// Shadcn components
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Custom components
import GpsMap from "@/components/custom/GpsMap";
import EmulatorSettings from "@/components/custom/EmulatorSettings";

const POLLING_INTERVAL = 1000; // 1 second

// Car SVG icon
const CarIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16 6H6L4 10M16 6H18L20 10M16 6V4M6 6V4M4 10H20M4 10V17C4 17.5523 4.44772 18 5 18H6C6.55228 18 7 17.5523 7 17V16H17V17C17 17.5523 17.4477 18 18 18H19C19.5523 18 20 17.5523 20 17V10M7 13.5C7 14.3284 6.32843 15 5.5 15C4.67157 15 4 14.3284 4 13.5C4 12.6716 4.67157 12 5.5 12C6.32843 12 7 12.6716 7 13.5ZM20 13.5C20 14.3284 19.3284 15 18.5 15C17.6716 15 17 14.3284 17 13.5C17 12.6716 17.6716 12 18.5 12C19.3284 12 20 12.6716 20 13.5Z" 
      stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
  </svg>
);

// Stats component for reusability
const StatCard = ({ title, value, unit = "" }: { title: string; value: number | string; unit?: string }) => (
  <Card className="bg-card/50 border-border/30">
    <CardContent className="p-4">
      <p className="text-xs text-muted-foreground">{title}</p>
      <p className="text-2xl font-bold mt-1">
        {value}
        {unit && <span className="text-xs text-muted-foreground ml-1">{unit}</span>}
      </p>
    </CardContent>
  </Card>
);

interface IGpsTrackingState {
  isTracking: boolean;
  currentPosition: GeolocationPosition | null;
  previousPosition: GeolocationPosition | null;
  positionHistory: GeolocationPosition[];
  error: string | null;
  engineOn: boolean;
  totalDistance: number;
  stats: {
    packetsCount: number;
    totalDistance: number;
    avgSpeed: number;
    bufferSize: number;
  };
}

interface IGpsTrackingProps {
  cycleId?: string;
}

export default function Emulator({ cycleId = '1' }: IGpsTrackingProps) {
  const [trackingState, setTrackingState] = useState<IGpsTrackingState>({
    isTracking: false,
    currentPosition: null,
    previousPosition: null,
    positionHistory: [],
    error: null,
    engineOn: false,
    totalDistance: 0,
    stats: {
      packetsCount: 0,
      totalDistance: 0,
      avgSpeed: 0,
      bufferSize: 0,
    }
  });

  const [selectedTab, setSelectedTab] = useState("map");
  const [packetInterval, setPacketInterval] = useState<number>(10); // Í∏∞Î≥∏ 10Ï¥à
  
  const watchIdRef = useRef<number | null>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const totalDistanceRef = useRef<number>(0);
  const packetsCountRef = useRef<number>(0);
  
  // Mock data related state
  const [useMockData, setUseMockData] = useState(false);
  const mockDataRef = useRef<GeolocationPosition[]>([]);
  const mockStartTimeRef = useRef<number>(0);

  const [onTime, setOnTime] = useState<string>("");

  // Initialize mock data when needed
  useEffect(() => {
    if (useMockData && mockDataRef.current.length === 0) {
      // Generate the mock route data with a speed factor (higher = faster)
      mockDataRef.current = mockGpsData.createMockRouteData(2, 15); // 15 interpolation points
    }
  }, [useMockData]);

  // GpsBuffer Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    gpsBuffer.setInterval(packetInterval);
    gpsBuffer.setCycleId(cycleId);
  }, [packetInterval, cycleId]);

  // ÏóêÎü¨ ÏÑ§Ï†ï Ìï®Ïàò
  const setError = (errorMessage: string) => {
    setTrackingState(prev => ({
      ...prev,
      error: errorMessage
    }));
  };

  // ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÌëúÏãú Ìï®Ïàò
  const showToast = (message: string) => {
    console.log(message); // Ïã§Ï†úÎ°úÎäî ÌÜ†Ïä§Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏Î°ú ÎåÄÏ≤¥
    // ÏûÑÏãúÎ°ú ÏóêÎü¨ ÏÉÅÌÉúÏóê Î©îÏãúÏßÄ ÌëúÏãú
    setTrackingState(prev => ({
      ...prev,
      error: message
    }));
  };

  // ÏúÑÏπò Ï¥àÍ∏∞Ìôî Ìï®Ïàò
  const initializeLocation = () => {
    initLocation(
      useMockData,
      () => {
        if (mockDataRef.current.length === 0) {
          // Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ïã§Ï†ú mockGpsData Î™®Îìà ÏÇ¨Ïö©)
          mockDataRef.current = mockGpsData.createMockRouteData(2, 15);
        }
        return mockDataRef.current;
      },
      (position) => {
        setTrackingState((prev) => ({
          ...prev,
          currentPosition: position,
          previousPosition: position,
        }));
      },
      setError
    );
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏúÑÏπò Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    initializeLocation();
  }, []);

  // Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ Î≥ÄÍ≤Ω Ïãú ÏúÑÏπò Ï†ïÎ≥¥ Îã§Ïãú Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    initializeLocation();
  }, [useMockData]);

  // Ï£ºÍ∏∞ Ï†ïÎ≥¥ Ï†ÑÏÜ° ÏãúÏûë
  const startTracking = () => {
    // Í∏∞Ï°¥ Ï∂îÏ†Å Ï§ëÏßÄ
    stopTracking();
    
    // ÌÜµÍ≥Ñ, Ìå®ÌÇ∑ Í∏∞Î°ù, Î≤ÑÌçº Ï¥àÍ∏∞Ìôî
    totalDistanceRef.current = 0;
    packetsCountRef.current = 0;
    gpsBuffer.reset();

    // Ï∂îÏ†Å ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setTrackingState(prev => ({
      ...prev,
      isTracking: true,
      error: null,
      positionHistory: [],
      stats: {
        packetsCount: 0,
        totalDistance: 0,
        avgSpeed: 0,
        bufferSize: 0,
      }
    }));
    
    if (useMockData) {
      // Use mock data for tracking
      mockStartTimeRef.current = Date.now();
      startMockTracking();
    } else {
      // Use real geolocation API
      startRealTracking();
    }
  };


  // Ïã§Ï†ú ÏúÑÏπò Ï∂îÏ†Å ÏãúÏûë
  const startRealTracking = () => {
    if ("geolocation" in navigator) {
      try {
        // watchPosition ÎåÄÏã† 1Ï¥àÎßàÎã§ ÏßÅÏ†ë ÏúÑÏπò ÌôïÏù∏ Î°úÏßÅ Íµ¨ÌòÑ
        timerRef.current = setInterval(() => {
          try {
            navigator.geolocation.getCurrentPosition(
              handlePositionUpdate,
              (error) => {
                // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ ÌÉÄÏù¥Î®∏Îäî Í≥ÑÏÜç Ïú†ÏßÄ
                handlePositionError(error);
                console.warn(`‚ö†Ô∏è [${new Date().toLocaleTimeString()}] ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ Ïã§Ìå®. Îã§Ïùå ÏöîÏ≤≠ Í≥ÑÏÜç ÏßÑÌñâ...`);
              },
              {
                enableHighAccuracy: true,
                timeout: 5000, // ÌÉÄÏûÑÏïÑÏõÉ ÏãúÍ∞ÑÏùÑ Ï§ÑÏó¨ ÏùëÎãµÏÑ± Ìñ•ÏÉÅ
                maximumAge: 0, // Ìï≠ÏÉÅ ÏÉàÎ°úÏö¥ ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠
              }
            );
          } catch (error) {
            console.error(`‚ùå [${new Date().toLocaleTimeString()}] getCurrentPosition Ìò∏Ï∂ú Ïã§Ìå®:`, error);
            // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ ÌÉÄÏù¥Î®∏Îäî Í≥ÑÏÜç Ïú†ÏßÄ
          }
        }, POLLING_INTERVAL);
        
        console.log(`üîÑ [${new Date().toLocaleTimeString()}] Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å ÏãúÏûë (Í∞ÑÍ≤©: ${POLLING_INTERVAL}ms)`);
      } catch (error) {
        setTrackingState(prev => ({
          ...prev,
          isTracking: false,
          error: "Ìä∏ÎûòÌÇπ ÏãúÏûë Ïã§Ìå®: " + (error as Error).message,
        }));
      }
    } else {
      setTrackingState(prev => ({
        ...prev,
        isTracking: false,
        error: "Ïù¥ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÎäî ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§",
      }));
    }
  };

  const startMockTracking = () => {
    // Set initial position from mock data
    const initialPosition = mockGpsData.getCurrentPositionFromMockData(
      mockDataRef.current,
      mockStartTimeRef.current
    );
    
    if (initialPosition) {
      handlePositionUpdate(initialPosition);
    }
    
    // Start polling for mock position updates
    timerRef.current = setInterval(() => {
      const currentPosition = mockGpsData.getCurrentPositionFromMockData(
        mockDataRef.current,
        mockStartTimeRef.current
      );
      
      if (currentPosition) {
        handlePositionUpdate(currentPosition);
      } else {
        // End of route
        stopTracking();
      }
    }, POLLING_INTERVAL);
  };

  const stopTracking = () => {
    // Clear real tracking
    if (watchIdRef.current !== null) {
      navigator.geolocation.clearWatch(watchIdRef.current);
      watchIdRef.current = null;
    }
    
    // Clear tracking timer
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
      console.log(`‚èπÔ∏è [${new Date().toLocaleTimeString()}] ÏúÑÏπò Ï∂îÏ†Å ÌÉÄÏù¥Î®∏ Ï§ëÏßÄÎê®`);
    }
    
    // ÎßàÏßÄÎßâÏúºÎ°ú Î≤ÑÌçºÏóê ÎÇ®ÏïÑÏûàÎäî Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    if (gpsBuffer.getBufferSize() > 0) {
      console.log(`üì§ [${new Date().toLocaleTimeString()}] Ï∂îÏ†Å Ï§ëÏßÄ Ïãú Î≤ÑÌçºÏóê ÎÇ®ÏùÄ ${gpsBuffer.getBufferSize()}Í∞úÏùò Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏãúÎèÑ...`);
      
      // ÎπÑÎèôÍ∏∞ Ìï®ÏàòÏù¥ÏßÄÎßå UI ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌï¥ ÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨
      gpsBuffer.sendData()
        .then(success => {
          if (success) {
            console.log(`‚úÖ [${new Date().toLocaleTimeString()}] Ï∂îÏ†Å Ï§ëÏßÄ Ïãú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏÑ±Í≥µ`);
          } else {
            console.log(`‚ö†Ô∏è [${new Date().toLocaleTimeString()}] Ï∂îÏ†Å Ï§ëÏßÄ Ïãú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïã§Ìå® ÎòêÎäî Î≤ÑÌçºÍ∞Ä ÎπÑÏñ¥ÏûàÏùå`);
          }
          
          // ÌÜµÍ≥Ñ UI ÏóÖÎç∞Ïù¥Ìä∏ (ÎπÑÎèôÍ∏∞ ÏûëÏóÖ ÌõÑ ÏµúÏã† ÏÉÅÌÉú Î∞òÏòÅ)
          setTrackingState(prev => ({
            ...prev,
            isTracking: false,
            stats: {
              ...prev.stats,
              packetsCount: gpsBuffer.getTotalPacketsCount(),
              bufferSize: gpsBuffer.getBufferSize(),
            }
          }));
        })
        .catch(error => {
          console.error(`‚ùå [${new Date().toLocaleTimeString()}] Ï∂îÏ†Å Ï§ëÏßÄ Ïãú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò:`, error);
          
          // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ UIÎäî ÏóÖÎç∞Ïù¥Ìä∏
          setTrackingState(prev => ({
            ...prev,
            isTracking: false,
            stats: {
              ...prev.stats,
              packetsCount: gpsBuffer.getTotalPacketsCount(),
              bufferSize: gpsBuffer.getBufferSize(),
            }
          }));
        });
    } else {
      // Î≤ÑÌçºÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Î∞îÎ°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setTrackingState(prev => ({
        ...prev,
        isTracking: false,
      }));
    }
  };

  // ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Ìï∏Îì§Îü¨ (Ïã§Ï†ú Î∞è Î™®Ïùò Îç∞Ïù¥ÌÑ∞ Î™®Îëê Ï†ÅÏö©)
  const handlePositionUpdate = (position: GeolocationPosition) => {
    // ÏÉà GPS Îç∞Ïù¥ÌÑ∞Î•º Î≤ÑÌçºÏóê Ï∂îÍ∞Ä (Ï£ºÍ∏∞Î≥ÑÎ°ú cListÏóê Ìè¨Ìï®Îê† Îç∞Ïù¥ÌÑ∞)
    gpsBuffer.addPosition(position);
    
    setTrackingState(prev => {
      // Ïù¥Ï†Ñ ÏúÑÏπòÏôÄ ÎπÑÍµêÌïòÏó¨ Ïù¥Îèô Í±∞Î¶¨ Í≥ÑÏÇ∞
      let distance = 0;
      if (prev.currentPosition) {
        distance = calculateDistance(prev.currentPosition, position);
        totalDistanceRef.current += distance;
      }
      
      // Ïù¥Î†•Ïóê ÌòÑÏû¨ ÏúÑÏπò Ï∂îÍ∞Ä
      const updatedHistory = [...prev.positionHistory, position];
      
      // ÏµúÍ∑º ÏúÑÏπò Í∏∞Î∞òÏúºÎ°ú ÌèâÍ∑† ÏÜçÎèÑ Í≥ÑÏÇ∞ (ÏµúÍ∑º 10Í∞ú Ìè¨Ïù∏Ìä∏)
      const recentPositions = updatedHistory.slice(-10);
      let avgSpeed = 0;
      
      if (recentPositions.length > 1) {
        const speedSum = recentPositions
          .filter(pos => pos.coords.speed !== null && pos.coords.speed !== undefined)
          .reduce((sum, pos) => sum + (pos.coords.speed || 0), 0);
        
        const speedCount = recentPositions
          .filter(pos => pos.coords.speed !== null && pos.coords.speed !== undefined)
          .length;
          
        avgSpeed = speedCount > 0 ? speedSum / speedCount : 0;
      }
      
      // ÏÉà ÏúÑÏπò Ï†ïÎ≥¥ Î°úÍπÖ - Ï¥àÎãπ ÏàòÏßë ÌôïÏù∏Ïö©
      console.log(`üõ£Ô∏è ÏúÑÏπò Îç∞Ïù¥ÌÑ∞ ÏàòÏßë: ÏúÑÎèÑ=${position.coords.latitude.toFixed(6)}, Í≤ΩÎèÑ=${position.coords.longitude.toFixed(6)}, ÏÜçÎèÑ=${position.coords.speed || 0}m/s, Î≤ÑÌçº=${gpsBuffer.getBufferSize()}`);
      
      return {
        ...prev,
        currentPosition: position,
        previousPosition: prev.currentPosition,
        positionHistory: updatedHistory,
        error: null,
        stats: {
          packetsCount: gpsBuffer.getTotalPacketsCount(),
          totalDistance: parseFloat(totalDistanceRef.current.toFixed(1)),
          avgSpeed: parseFloat(avgSpeed.toFixed(1)),
          bufferSize: gpsBuffer.getBufferSize(),
        }
      };
    });
  };

  // Î≤ÑÌçº Î∞è Ìå®ÌÇ∑ Ïπ¥Ïö¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (!trackingState.isTracking) return;

    const bufferTimer = setInterval(() => {
      setTrackingState(prev => ({
        ...prev,
        stats: {
          ...prev.stats,
          packetsCount: gpsBuffer.getTotalPacketsCount(),
          bufferSize: gpsBuffer.getBufferSize(),
        }
      }));
    }, 1000);

    return () => clearInterval(bufferTimer);
  }, [trackingState.isTracking]);

  // ÏúÑÏπò ÏóêÎü¨ Ìï∏Îì§Îü¨
  const handlePositionError = (error: GeolocationPositionError) => {
    // Ïò§Î•ò ÏΩîÎìúÏóê Îî∞Î•∏ ÏÉÅÏÑ∏ Î©îÏãúÏßÄ
    let errorMessage = "Ïïå Ïàò ÏóÜÎäî ÏúÑÏπò Ï†ïÎ≥¥ Ïò§Î•ò";
    
    switch (error.code) {
      case error.PERMISSION_DENIED:
        errorMessage = "ÏÇ¨Ïö©ÏûêÍ∞Ä ÏúÑÏπò Ï†ïÎ≥¥ Ï†ëÍ∑ºÏùÑ Í±∞Î∂ÄÌñàÏäµÎãàÎã§";
        break;
      case error.POSITION_UNAVAILABLE:
        errorMessage = "ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§";
        break;
      case error.TIMEOUT:
        errorMessage = "ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§";
        break;
    }
    
    console.warn(`‚ö†Ô∏è [${new Date().toLocaleTimeString()}] ${errorMessage} (${error.code})`);
    
    // ÏóêÎü¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (Ïù¥Ï†Ñ ÏóêÎü¨ÏôÄ Îã§Î•º Í≤ΩÏö∞ÏóêÎßå)
    setTrackingState(prev => {
      if (prev.error !== errorMessage) {
        return {
          ...prev,
          error: errorMessage,
        };
      }
      return prev;
    });
  };

  // Ï£ºÍ∏∞ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleIntervalChange = (value: number) => {
    setPacketInterval(value);
    gpsBuffer.setInterval(value);
  };

  // Clean up on component unmount
  useEffect(() => {
    return () => {
      stopTracking();
    };
  }, []);

  // Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ ÌÜ†Í∏Ä
  const toggleDataSource = () => {
    setUseMockData(prev => !prev);
  };

  // ÏãúÎèô ON Ìï®Ïàò
  const handleEngineOn = async () => {
    if (!trackingState.currentPosition) {
      showToast("ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. ÏúÑÏπò Ï†ïÎ≥¥Î•º Î®ºÏ†Ä Í∞ÄÏ†∏ÏôÄ Ï£ºÏÑ∏Ïöî.");
      return;
    }
    
    try {
      // emulatorUtilsÏóêÏÑú Ï†úÍ≥µÌïòÎäî Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏöîÏ≤≠ Í∞ùÏ≤¥ ÏÉùÏÑ±
      const engineRequest = createEngineOnRequest(trackingState.currentPosition);
      
      // ÏãúÎèô ON ÏãúÍ∞Ñ ÏÉÅÌÉú Ï†ÄÏû•
      setOnTime(engineRequest.onTime);
      
      // ÏóîÏßÑ ON API ÏöîÏ≤≠
      const response = await hubApiService.sendEngineOn(engineRequest);
      
      console.log("ÏãúÎèô ON ÏöîÏ≤≠ ÏÑ±Í≥µ:", response);
      showToast("ÏãúÎèô ON ÏöîÏ≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.");
      
      // ÏóîÏßÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω
      setTrackingState((prev) => ({
        ...prev,
        engineOn: true
      }));
    } catch (error) {
      console.error("ÏãúÎèô ON ÏöîÏ≤≠ Ïã§Ìå®:", error);
      showToast("ÏãúÎèô ON ÏöîÏ≤≠Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  };
  
  // ÏãúÎèô OFF Ìï®Ïàò
  const handleEngineOff = async () => {
    if (!trackingState.currentPosition) {
      showToast("ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. ÏúÑÏπò Ï†ïÎ≥¥Î•º Î®ºÏ†Ä Í∞ÄÏ†∏ÏôÄ Ï£ºÏÑ∏Ïöî.");
      return;
    }
    
    try {
      console.log(`üîÑ [${new Date().toLocaleTimeString()}] ÏãúÎèô OFF ÏöîÏ≤≠ ÏãúÏûë - Î≤ÑÌçºÏóê ÎÇ®ÏùÄ GPS Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ï§ë...`);
      
      // Î≤ÑÌçºÏóê ÎÇ®ÏïÑÏûàÎäî Î™®Îì† GPS Îç∞Ïù¥ÌÑ∞ Ï¶âÏãú Ï†ÑÏÜ°
      if (gpsBuffer.getBufferSize() > 0) {
        // reset Ìï®ÏàòÏùò Ï≤´ Î≤àÏß∏ Ïù∏ÏûêÎ•º trueÎ°ú ÏÑ§Ï†ïÌïòÏó¨ ÎÇ®ÏùÄ Îç∞Ïù¥ÌÑ∞ Î™®Îëê Ï†ÑÏÜ°
        await gpsBuffer.reset(true);
        
        // Î≤ÑÌçºÏôÄ Ìå®ÌÇ∑ Ïπ¥Ïö¥Ìä∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        setTrackingState(prev => ({
          ...prev,
          stats: {
            ...prev.stats,
            packetsCount: gpsBuffer.getTotalPacketsCount(),
            bufferSize: gpsBuffer.getBufferSize(), // Î≤ÑÌçºÍ∞Ä ÎπÑÏõåÏ°åÏúºÎØÄÎ°ú 0Ïù¥ Îê† Í≤É
          }
        }));
        
        console.log(`‚úÖ [${new Date().toLocaleTimeString()}] Î≤ÑÌçºÏóê ÎÇ®ÏùÄ Î™®Îì† GPS Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏôÑÎ£å, Î≤ÑÌçº: ${gpsBuffer.getBufferSize()}, Ìå®ÌÇ∑: ${gpsBuffer.getTotalPacketsCount()}`);
      }
      
      // Ï∂îÏ†Å Ï§ëÏù¥Î©¥ Ï∂îÏ†Å Ï§ëÏßÄ
      if (trackingState.isTracking) {
        stopTracking();
      }
      
      // emulatorUtilsÏóêÏÑú Ï†úÍ≥µÌïòÎäî Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏöîÏ≤≠ Í∞ùÏ≤¥ ÏÉùÏÑ±
      const engineRequest = createEngineOffRequest(
        trackingState.currentPosition,
        onTime,
        trackingState.totalDistance
      );
      
      // ÏóîÏßÑ OFF API ÏöîÏ≤≠
      const response = await hubApiService.sendEngineOff(engineRequest);
      
      console.log(`‚úÖ [${new Date().toLocaleTimeString()}] ÏãúÎèô OFF ÏöîÏ≤≠ ÏÑ±Í≥µ:`, response);
      showToast("ÏãúÎèô OFF ÏöîÏ≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.");
      
      // ÏóîÏßÑ ÏÉÅÌÉú, Ï¥ù Í±∞Î¶¨ Ï¥àÍ∏∞ÌôîÌïòÎêò Ìå®ÌÇ∑ Ïπ¥Ïö¥Ìä∏Îäî Ïú†ÏßÄ
      setTrackingState((prev) => ({
        ...prev,
        engineOn: false,
        totalDistance: 0,
        // ÏµúÏ¢Ö ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏ Î≥¥Ïû•
        stats: {
          ...prev.stats,
          packetsCount: gpsBuffer.getTotalPacketsCount(),
          bufferSize: gpsBuffer.getBufferSize(),
        }
      }));
    } catch (error) {
      console.error(`‚ùå [${new Date().toLocaleTimeString()}] ÏãúÎèô OFF ÏöîÏ≤≠ Ïã§Ìå®:`, error);
      showToast("ÏãúÎèô OFF ÏöîÏ≤≠Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      
      // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ UI ÏÉÅÌÉúÎäî ÏóÖÎç∞Ïù¥Ìä∏
      setTrackingState(prev => ({
        ...prev,
        stats: {
          ...prev.stats,
          packetsCount: gpsBuffer.getTotalPacketsCount(),
          bufferSize: gpsBuffer.getBufferSize(),
        }
      }));
    }
  };

  // ÏÉÅÎã®Ïóê Ï∂îÍ∞ÄÌï† Ìï®Ïàò
  const formatTimeToYYYYMMDDHHMM = (timestamp: number): string => {
    const date = new Date(timestamp);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}${month}${day}${hours}${minutes}`;
  };

  return (
    <div className="container mx-auto px-2 sm:px-4 md:px-6 lg:px-8 max-w-screen-xl py-4 md:py-8">
      <Card className="overflow-hidden bg-gradient-to-br from-background to-background/50 border-none shadow-xl">
        <CardHeader className="border-b bg-card/20 backdrop-blur-sm">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <div>
              <CardTitle className="flex items-center gap-2 text-xl md:text-2xl">
                <CarIcon /> Ï∞®Îüâ GPS ÏóêÎÆ¨Î†àÏù¥ÌÑ∞
              </CardTitle>
              <CardDescription className="text-sm">
                {useMockData 
                  ? "ÎØ∏ÏôïÎπåÎî©ÏóêÏÑú ÏùºÏÇ∞ ÌñâÏã†ÎèôÍπåÏßÄ Í≤ΩÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖò" 
                  : "Ïã§ÏãúÍ∞Ñ Ï∞®Îüâ ÏúÑÏπò Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ï†ÑÏÜ° ÏãúÏä§ÌÖú"}
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <Badge 
                variant={trackingState.isTracking ? "default" : "secondary"} 
                className="px-3 py-1.5 text-sm font-medium shadow-sm"
              >
                <div className="flex items-center gap-1.5">
                  {trackingState.isTracking ? (
                    <>
                      <span className="relative flex h-2.5 w-2.5">
                        <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
                        <span className="relative inline-flex rounded-full h-2.5 w-2.5 bg-green-500"></span>
                      </span>
                      ÌôúÏÑ± ÏÉÅÌÉú
                    </>
                  ) : (
                    <>
                      <span className="relative flex h-2.5 w-2.5">
                        <span className="relative inline-flex rounded-full h-2.5 w-2.5 bg-gray-400"></span>
                      </span>
                      ÎåÄÍ∏∞ ÏÉÅÌÉú
                    </>
                  )}
                </div>
              </Badge>
              <Button 
                variant="outline" 
                size="sm" 
                className="flex items-center gap-1.5 h-9 px-3 border-border shadow-sm"
                onClick={() => {
                  // Î™®Îì† ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                  stopTracking();
                  totalDistanceRef.current = 0;
                  packetsCountRef.current = 0;
                  gpsBuffer.reset();
                  
                  setTrackingState({
                    isTracking: false,
                    currentPosition: null,
                    previousPosition: null,
                    positionHistory: [],
                    error: null,
                    engineOn: false,
                    totalDistance: 0,
                    stats: {
                      packetsCount: 0,
                      totalDistance: 0,
                      avgSpeed: 0,
                      bufferSize: 0,
                    }
                  });

                  // Î™®Ïùò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
                  if (useMockData) {
                    mockDataRef.current = mockGpsData.createMockRouteData(2, 15);
                    mockStartTimeRef.current = 0;
                  }
                  
                  // ÏúÑÏπò Ï¥àÍ∏∞Ìôî
                  initializeLocation();
                  
                  showToast("ÏóêÎÆ¨Î†àÏù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞Ìôî ÎêòÏóàÏäµÎãàÎã§.");
                }}
                disabled={trackingState.engineOn}
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M1 4V10H7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M23 20V14H17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M20.49 9.00001C19.9828 7.56329 19.1209 6.28161 17.9845 5.27419C16.848 4.26678 15.4745 3.56506 13.9917 3.24053C12.5089 2.916 10.9652 2.98326 9.51894 3.43398C8.0727 3.8847 6.76895 4.70081 5.76001 5.80001L1 10M23 14L18.24 18.2C17.2311 19.2992 15.9273 20.1153 14.4811 20.566C13.0349 21.0168 11.4911 21.084 10.0083 20.7595C8.52547 20.435 7.15198 19.7333 6.01553 18.7258C4.87907 17.7184 4.01718 16.4367 3.51001 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
                Ï¥àÍ∏∞Ìôî
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <div className="md:grid md:grid-cols-12 md:gap-6">
          {/* ÏôºÏ™Ω Ìå®ÎÑê: Ïª®Ìä∏Î°§ Î∞è Îç∞Ïù¥ÌÑ∞ */}
          <div className="md:col-span-5 lg:col-span-4">
            <CardContent className="p-4 md:p-6">
              <div className="flex flex-col gap-6">
                {/* ÏÉÅÌÉú ÏßÄÌëú */}
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-2 lg:grid-cols-2 gap-3">
                  <StatCard title="Ï¥ù Í±∞Î¶¨" value={trackingState.stats.totalDistance.toFixed(1)} unit="m" />
                  <StatCard title="ÌèâÍ∑† ÏÜçÎèÑ" value={Math.round(trackingState.stats.avgSpeed)} unit="m/s" />
                  <StatCard title="Ï†ÑÏÜ° Ìå®ÌÇ∑" value={trackingState.stats.packetsCount} />
                  <StatCard 
                    title="Î≤ÑÌçº" 
                    value={trackingState.stats.bufferSize}
                  />
                </div>
                
                {/* Ï†ÑÏÜ° Ï£ºÍ∏∞ ÏÑ§Ï†ï */}
                <EmulatorSettings 
                  interval={packetInterval}
                  onIntervalChange={handleIntervalChange}
                  isTracking={trackingState.isTracking}
                />
                
                {/* ÏãúÎèô ON/OFF */}
                <div className="grid grid-cols-2 gap-3">
                  <Button 
                    className="flex-1"
                    onClick={handleEngineOn} 
                    variant="default"
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
                      <path d="M16 6H6L4 10M16 6H18L20 10M16 6V4M6 6V4M4 10H20M4 10V17C4 17.5523 4.44772 18 5 18H6C6.55228 18 7 17.5523 7 17V16H17V17C17 17.5523 17.4477 18 18 18H19C19.5523 18 20 17.5523 20 17V10" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                    ÏãúÎèô ON
                  </Button>
                  <Button 
                    className="flex-1"
                    onClick={handleEngineOff} 
                    variant="destructive"
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
                      <path d="M16 6H6L4 10M16 6H18L20 10M16 6V4M6 6V4M4 10H20M4 10V17C4 17.5523 4.44772 18 5 18H6C6.55228 18 7 17.5523 7 17V16H17V17C17 17.5523 17.4477 18 18 18H19C19.5523 18 20 17.5523 20 17V10" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                    ÏãúÎèô OFF
                  </Button>
                </div>
                
                {/* Ï£ºÍ∏∞Ï†ïÎ≥¥ Ï†ÑÏÜ° ÏãúÏûë/Ï§ëÏßÄ Î≤ÑÌäº */}
                <div className="flex flex-col gap-3">
                  <Button 
                    className="w-full text-sm md:text-base py-5 sm:py-6"
                    onClick={startTracking} 
                    disabled={trackingState.isTracking}
                    variant="outline"
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2 flex-shrink-0">
                      <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M10 8L16 12L10 16V8Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                    Ï£ºÍ∏∞Ï†ïÎ≥¥ Ï†ÑÏÜ° ÏãúÏûë
                  </Button>
                  <Button 
                    className="w-full text-sm md:text-base py-5 sm:py-6"
                    onClick={stopTracking} 
                    disabled={!trackingState.isTracking}
                    variant="outline"
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2 flex-shrink-0">
                      <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      <path d="M9 9H15V15H9V9Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                    Ï£ºÍ∏∞Ï†ïÎ≥¥ Ï†ÑÏÜ° Ï§ëÏßÄ
                  </Button>
                </div>
                
                {/* Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ ÌÜ†Í∏Ä */}
                <Button 
                  onClick={toggleDataSource} 
                  variant="outline" 
                  className="w-full"
                  disabled={trackingState.isTracking}
                >
                  <svg width="16" height="16" className="mr-2" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 7H4C2.89543 7 2 7.89543 2 9V19C2 20.1046 2.89543 21 4 21H20C21.1046 21 22 20.1046 22 19V9C22 7.89543 21.1046 7 20 7Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M16 21V5C16 4.46957 15.7893 3.96086 15.4142 3.58579C15.0391 3.21071 14.5304 3 14 3H10C9.46957 3 8.96086 3.21071 8.58579 3.58579C8.21071 3.96086 8 4.46957 8 5V21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  {useMockData ? "Ïã§Ï†ú ÏúÑÏπò ÏÇ¨Ïö©" : "Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©"}
                </Button>
                
                {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
                {trackingState.error && (
                  <div className="bg-amber-50 border border-amber-200 text-amber-700 rounded-md p-3 text-sm">
                    <p className="flex items-center gap-2">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                        <line x1="12" y1="9" x2="12" y2="13"/>
                        <line x1="12" y1="17" x2="12.01" y2="17"/>
                      </svg>
                      {trackingState.error}
                    </p>
                    {trackingState.isTracking && (
                      <p className="mt-2 text-xs flex items-center gap-1.5">
                        <span className="relative flex h-2 w-2">
                          <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
                          <span className="relative inline-flex rounded-full h-2 w-2 bg-green-500"></span>
                        </span>
                        ÏúÑÏπò Ï†ïÎ≥¥ ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏßÄÎßå, Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Î∞è Ï†ÑÏÜ°ÏùÄ Í≥ÑÏÜç ÏßÑÌñâÎê©ÎãàÎã§. Îã§Ïùå ÏöîÏ≤≠ÏóêÏÑú ÏúÑÏπò Ï†ïÎ≥¥Î•º Îã§Ïãú Í∞ÄÏ†∏ÏòµÎãàÎã§.
                      </p>
                    )}
                  </div>
                )}
              </div>
            </CardContent>
            
            {/* ÏúÑÏπò Ï†ïÎ≥¥ */}
            {trackingState.currentPosition && (
              <CardContent className="border-t p-4 md:p-6 border-border/20">
                <h3 className="text-lg font-medium mb-3">ÌòÑÏû¨ ÏúÑÏπò Ï†ïÎ≥¥</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">ÏúÑÎèÑ</span>
                    <span className="font-mono">{trackingState.currentPosition.coords.latitude.toFixed(6)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">Í≤ΩÎèÑ</span>
                    <span className="font-mono">{trackingState.currentPosition.coords.longitude.toFixed(6)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">Í≥†ÎèÑ</span>
                    <span className="font-mono">
                      {trackingState.currentPosition.coords.altitude 
                        ? `${trackingState.currentPosition.coords.altitude.toFixed(2)} m` 
                        : "N/A"}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">ÏÜçÎèÑ</span>
                    <span className="font-mono">
                      {trackingState.currentPosition.coords.speed !== null
                        ? `${(trackingState.currentPosition.coords.speed * 3.6).toFixed(1)} km/h`
                        : "N/A"}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">Î∞©Ìñ•</span>
                    <span className="font-mono">
                      {trackingState.currentPosition.coords.heading !== null
                        ? `${trackingState.currentPosition.coords.heading.toFixed(1)}¬∞`
                        : "N/A"}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">Ï†ïÌôïÎèÑ</span>
                    <span className="font-mono">{trackingState.currentPosition.coords.accuracy.toFixed(1)} m</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-muted-foreground">ÏãúÍ∞Ñ</span>
                    <span className="font-mono">{formatTimeToYYYYMMDDHHMM(trackingState.currentPosition.timestamp)}</span>
                  </div>
                </div>
              </CardContent>
            )}
          </div>
            
          {/* Ïò§Î•∏Ï™Ω Ìå®ÎÑê: ÏãúÍ∞ÅÌôî */}
          <div className="md:col-span-7 lg:col-span-8 border-t md:border-t-0 md:border-l border-border/20">
            <CardContent className="h-full p-4 md:p-6">
              <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
                <TabsList className="mb-4">
                  <TabsTrigger value="map">ÏßÄÎèÑ Î≥¥Í∏∞</TabsTrigger>
                  <TabsTrigger value="data">Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ</TabsTrigger>
                </TabsList>
                
                <TabsContent value="map" className="mt-0">
                  {/* ÏßÄÎèÑ Ïª¥Ìè¨ÎÑåÌä∏ */}
                  <div className="w-full h-[300px] sm:h-[350px] md:h-[400px] lg:h-[500px] relative rounded-lg overflow-hidden">
                    <GpsMap 
                      currentPosition={trackingState.currentPosition}
                      positionHistory={trackingState.positionHistory}
                      isTracking={trackingState.isTracking}
                      autoCenter={true}
                    />
                  </div>
                </TabsContent>
                
                <TabsContent value="data" className="mt-0">
                  <div className="bg-card/30 backdrop-blur-sm rounded-lg h-[300px] sm:h-[350px] md:h-[400px] lg:h-[500px] p-4 overflow-auto">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="font-medium">ÏàòÏßëÎêú ÏúÑÏπò Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 10Í∞ú)</h3>
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">Ï†ÑÏÜ° Ï£ºÍ∏∞: {packetInterval}Ï¥à</Badge>
                        <Badge variant="outline">Î≤ÑÌçº: {trackingState.stats.bufferSize}Í∞ú</Badge>
                      </div>
                    </div>
                    <div className="overflow-x-auto">
                      <table className="w-full text-sm">
                        <thead>
                          <tr className="border-b border-border/40">
                            <th className="text-left pb-2 font-medium">ÏàúÎ≤à</th>
                            <th className="text-left pb-2 font-medium">ÏúÑÎèÑ</th>
                            <th className="text-left pb-2 font-medium">Í≤ΩÎèÑ</th>
                            <th className="text-left pb-2 font-medium">ÏÜçÎèÑ</th>
                            <th className="text-left pb-2 font-medium">ÏãúÍ∞Ñ</th>
                          </tr>
                        </thead>
                        <tbody>
                          {trackingState.positionHistory.slice(-10).reverse().map((pos, idx) => (
                            <tr key={pos.timestamp} className="border-b border-border/10">
                              <td className="py-2">#{trackingState.positionHistory.length - idx}</td>
                              <td className="py-2 font-mono">{pos.coords.latitude.toFixed(6)}</td>
                              <td className="py-2 font-mono">{pos.coords.longitude.toFixed(6)}</td>
                              <td className="py-2 font-mono">
                                {pos.coords.speed !== null
                                  ? `${(pos.coords.speed * 3.6).toFixed(1)} km/h`
                                  : "N/A"}
                              </td>
                              <td className="py-2 font-mono">{formatTimeToYYYYMMDDHHMM(pos.timestamp)}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    
                    {trackingState.positionHistory.length === 0 && (
                      <div className="text-center text-muted-foreground mt-8">
                        <p>ÏúÑÏπò Ï∂îÏ†ÅÏùÑ ÏãúÏûëÌïòÎ©¥ Îç∞Ïù¥ÌÑ∞Í∞Ä Ïù¥Í≥≥Ïóê ÌëúÏãúÎê©ÎãàÎã§.</p>
                      </div>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
            </CardContent>
          </div>
        </div>
        
        <CardFooter className="border-t border-border/20 bg-card/20 backdrop-blur-sm p-4 md:p-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
          <div className="text-sm text-muted-foreground">
            <p className="flex items-center gap-1.5">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 16V12L10 10M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏: {trackingState.currentPosition ? formatTimeToYYYYMMDDHHMM(trackingState.currentPosition.timestamp) : '--:--:--'}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="outline" className="font-mono">Ï£ºÍ∏∞: {packetInterval}Ï¥à</Badge>
            <Badge variant="outline" className="font-mono">ÏúÑÏπò Ïù¥Î†•: {trackingState.positionHistory.length}Í∞ú</Badge>
            <Badge variant="outline" className="font-mono">v1.2.0</Badge>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
